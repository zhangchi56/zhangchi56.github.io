<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在你变好的这些年，一定过得很辛苦吧？</title>
      <link href="/2020/02/23/zai-ni-bian-hao-de-zhe-xie-nian-yi-ding-guo-de-hen-xin-ku-ba/"/>
      <url>/2020/02/23/zai-ni-bian-hao-de-zhe-xie-nian-yi-ding-guo-de-hen-xin-ku-ba/</url>
      
        <content type="html"><![CDATA[<p>　　年华似水匆匆走过，岁月悄然无声增长，在静下来的时光里回首过往，发现人总是会在某一刻感叹良多。</p><p>　　许是念起一些事，许是念起一些人，许是念起经历的点点滴滴……</p><p>　　后来总结发现，其实每个人都不容易，其实每个人都各有苦衷。当你试着理解过去，当你试着看淡曾经，内心便会生出一种叫做慈悲的东西；当你学着接纳自己的好与不好时，意味着你也在跟这个世界握手言和。</p><p>　　“那些打不倒你的过去，都终将会让你变得更强大。”</p><p><img src="/medias/imgs/8.jpg" alt=""></p><p>　　以前我一直不相信这句话，觉得这不过是一句现实生活中的鸡汤语，直到经历了一些事，我才不得不承认有些经历未必不好，因为它至少会教会你一些什么。</p><p>　　日子每一天都是新的，人则每一天都可能经历不一样的事情，当你学会对发生的事情进行思考、总结，通过长时间的积累，对一些事物的看法也便渐渐会由浅入深，由表及里，自然也就有了自己更独到的看法和想法。</p><p>　　在岁月里，这些其实都统称为阅历。因为当你走过一些路，经历一些人、经历一些事，多少都会有收获、有感慨，也有经验之谈。</p><p>　　就像旅行，当你走出去看的多了，眼界自然打开，心胸自然开阔，同时你也会更明白和清楚自己最想要的是什么，什么又才是最值得自己去珍惜和追求的。所以，前辈们口中所说的经历得越多，阅历则越丰富也并不是没有道理的。</p><p><img src="/medias/imgs/15.jpg" alt=""></p><p>　　曾经，在那些年少轻狂的岁月里，我记得只要有人诋毁我，我便会言辞激烈的去辩驳；有人误解我，我便会气急败坏的去解释；有人辱骂我，我便会用更加恶毒的语言去回敬对方……</p><p>　　没错，那会的我真的是个性鲜明，眼睛里容不得半点沙子，肠子直的都不会拐弯，活生生的把自己变成了自己最讨厌的那种人。</p><p>　　但后来我学会了自主的去调整自己的心态，也终于明白，这个世界上无论你有多好，还是会有人不喜欢你；这个世界不会因为你付出了多少，便同样的给予你多少回报；这个世界也不会因为你对别人友善，别人便也以同样的方式对待你。</p><p>　　是岁月和经历教会了我平和，是挫折和困境教会了我向上，是世间的人和事教会了我宽容……</p><p>　　渐渐的学会了不管遇到任何事都能平静的接受和面对，渐渐的对身边的人越来越温和，渐渐的对世间发生的任何事都淡然处之，就这样在时光里慢慢知味，就这样在岁月里缓缓沉香。</p><p><img src="/medias/imgs/18.jpg" alt=""></p><p>　　那些公平的、不公平的都是人生的常态。难得的是在你经历了许多之后，依然保持着那份谦卑和平和，依然保持着那份乐观和善良。</p><p>　　有人说：“每一个懂事淡定的现在，都有一个很傻很天真的过去，每一个温暖而淡然的如今，都有一个悲伤而不安的曾经”。回首过往，的确如此。所有越变越好的现在都多少有着各自不一样的曾经。</p><p>　　当时光磨平了你的菱角，即便是再急躁的人也会慢慢变得温柔有耐心。那些生个气牛都拉不回来的岁月也终将会慢慢离我们远去，换而来之的是微微一笑，好坏都坦然接受，以及生出一种闲看庭前花开花落，去留无意望天上云卷云舒的淡然。</p><p>　　这个时候的我们可能再也没有了年少时的轻狂和冲动，再也没有了孩童时的无忧和无虑，但这会的我们却懂得了生命的宽度和厚度。</p><p><img src="/medias/imgs/16.jpg" alt=""></p><p>　　一路走来哭过，笑过，迷茫过，颓废过，怀疑过，犹豫过……但终于还是学会了把一切都当成了成长。</p><p>　　或许这才是生活原本该有的样子吧！</p><p>　　你不辜负岁月，岁月亦不会辜负于你。</p><p>　　所幸最后没有辜负，所幸最后我们都慢慢变成了自己喜欢的样子，那么一切就都值得。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖和节流</title>
      <link href="/2020/02/23/fang-dou-he-jie-liu/"/>
      <url>/2020/02/23/fang-dou-he-jie-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><blockquote><p>函数防抖函数的防抖就是函数需要频繁触发情况时候，只有足够空闲的时间，才执行一次<br>例如：实时搜索、拖拽中</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> debounce<span class="token punctuation">(</span>func, delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> timer <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> clearTimeout<span class="token punctuation">(</span>timer<span class="token punctuation">)</span> timer <span class="token operator">=</span> setTimeout<span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          func.apply<span class="token punctuation">(</span>this, arguments<span class="token punctuation">)</span>        <span class="token punctuation">}</span>, delay<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><blockquote><p>函数节流就是预定一个函数只有在大于等于执行周期时候才会执行，周期内调用不执行<br>例如：窗口调整、页面滚动、购物疯狂点击</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> throttle<span class="token punctuation">(</span>func, wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>      var lastTime <span class="token operator">=</span> 0<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>        var nowTime <span class="token operator">=</span> new Date<span class="token punctuation">(</span><span class="token punctuation">)</span>.getTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nowTime - lastTime <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>          func.apply<span class="token punctuation">(</span>this, arguments<span class="token punctuation">)</span> lastTime <span class="token operator">=</span> nowTime        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中watch原理</title>
      <link href="/2020/02/23/vue-watch/"/>
      <url>/2020/02/23/vue-watch/</url>
      
        <content type="html"><![CDATA[<h2 id="vue中watch原理"><a href="#vue中watch原理" class="headerlink" title="vue中watch原理"></a>vue中watch原理</h2><h3 id="普通的watch"><a href="#普通的watch" class="headerlink" title="普通的watch"></a>普通的watch</h3><pre class=" language-bash"><code class="language-bash">data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    frontPoints: 0  <span class="token punctuation">}</span><span class="token punctuation">}</span>,watch: <span class="token punctuation">{</span>  frontPoints<span class="token punctuation">(</span>newValue,oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console.log<span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="对象属性的watch"><a href="#对象属性的watch" class="headerlink" title="对象属性的watch"></a>对象属性的watch</h3><blockquote><p>对象和数组都是引用类型，引用类型变量存的是地址，地址没有变，所以不会触发watch。这时我们需要进行深度监听，就需要加上一个属性 deep，值为 true</p></blockquote><pre class=" language-bash"><code class="language-bash">data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    bet: <span class="token punctuation">{</span>      pokerState: 53,      pokerHistory: <span class="token string">'local'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>,watch: <span class="token punctuation">{</span>  bet: <span class="token punctuation">{</span>    handle<span class="token punctuation">(</span>newValue, oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console.log<span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  deep: <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：只要对象的属性发生变化，就会执行handler函数；如果将监听对象中的具体属性，则可以通过计算属性computed作为中间层进行监听，例如：</p></blockquote><pre class=" language-bash"><code class="language-bash">data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    bet: <span class="token punctuation">{</span>      pokerState: 53,      pokerHistory: <span class="token string">'local'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>,computed: <span class="token punctuation">{</span>  pokerHistory<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> this.bet.pokerHistory  <span class="token punctuation">}</span><span class="token punctuation">}</span>watch: <span class="token punctuation">{</span>  bet: <span class="token punctuation">{</span>    handle<span class="token punctuation">(</span>newValue, oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console.log<span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  deep: <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><h3 id="Watch和computed的区别"><a href="#Watch和computed的区别" class="headerlink" title="Watch和computed的区别"></a>Watch和computed的区别</h3><h4 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h4><blockquote><p>watch用于观察和监听页面上的vue实例，当你需要在数据变化响应时，执行异步操作，或高性能消耗的操作，那么watch为最佳选择</p></blockquote><h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4><blockquote><p>可以关联多个实时计算的对象，当这些对象中的其中一个改变时都会触发这个属性具有缓存能力，所以只有当数据再次改变时才会重新渲染，否则就会直接拿取缓存中的数据</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站第一篇文章</title>
      <link href="/2020/02/23/first/"/>
      <url>/2020/02/23/first/</url>
      
        <content type="html"><![CDATA[<h1 id="从今天开始，每一天都至少要写一遍文章到博客里"><a href="#从今天开始，每一天都至少要写一遍文章到博客里" class="headerlink" title="从今天开始，每一天都至少要写一遍文章到博客里"></a>从今天开始，每一天都至少要写一遍文章到博客里</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
