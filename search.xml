<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020面试题总结</title>
      <link href="/2020/02/29/6.1-mian-shi-ti/"/>
      <url>/2020/02/29/6.1-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="面试总结"><a href="#面试总结" class="headerlink" title="面试总结"></a>面试总结</h1><blockquote><p>面试非常喜欢问底层原理，虽说底层原理在实际开发中，几乎用不到，但是能不能拿到offer就看这些底层原理，所以总结如下</p></blockquote><ul><li><p>重视基础和原理</p></li><li><p>重视基础和原理</p></li><li><p>重视基础和原理</p></li></ul><h1 id="高频必考"><a href="#高频必考" class="headerlink" title="高频必考"></a>高频必考</h1><hr><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><ul><li><p>构造函数是一种特殊的方法，主要用来在创建对象时初始化对象。每个构造函数都有prototype(原型)(箭头函数Function.prototype.bind()没有)属性，这个prototype(原型)属性是一个指针，指向一个对象，这个对象的是包特定类型的所有实例共享的属性和方法，即这个原型对象是用来给实例对象共享属性和方法的。每个实例的<strong>proto</strong>指向这个构造函数/类的prototype属性。</p></li><li><p>关于new操作符：</p></li></ul><ol><li><p>new执行的函数, 函数内部默认生成了一个对象</p></li><li><p>函数内部的this默认指向了这个new生成的对象</p></li><li><p>new执行函数生成的这个对象, 是函数的默认返回值</p></li></ol><blockquote><p>ES5例子</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> Person<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    this.name <span class="token operator">=</span> obj.name    this.age<span class="token operator">=</span> obj.age<span class="token punctuation">}</span>// 原型方法Person.prototype.say <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console.log<span class="token punctuation">(</span><span class="token string">'你好,'</span>, this.name <span class="token punctuation">)</span><span class="token punctuation">}</span>// p为实例化对象，new Person<span class="token punctuation">(</span><span class="token punctuation">)</span>这个操作称为构造函数的实例化<span class="token keyword">let</span> p <span class="token operator">=</span> new Person<span class="token punctuation">(</span><span class="token punctuation">{</span>name: <span class="token string">'番茄'</span>, age: <span class="token string">'27'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console.log<span class="token punctuation">(</span>p.name, p.age<span class="token punctuation">)</span>p.say<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>ES6例子</p></blockquote><pre class=" language-bash"><code class="language-bash">class Person<span class="token punctuation">{</span>    constructor<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>      this.name <span class="token operator">=</span> obj.name        this.age<span class="token operator">=</span> obj.age  <span class="token punctuation">}</span>  say<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console.log<span class="token punctuation">(</span>this.name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> p <span class="token operator">=</span> new Person<span class="token punctuation">(</span><span class="token punctuation">{</span>name: <span class="token string">'ES6-番茄'</span>, age: <span class="token string">'27'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console.log<span class="token punctuation">(</span>p.name, p.age<span class="token punctuation">)</span>p.say<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>关于原型的继承我们借助寄生组合继承</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> Person<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    this.name <span class="token operator">=</span> obj.name    this.age <span class="token operator">=</span> obj.age<span class="token punctuation">}</span>Person.prototype.add <span class="token operator">=</span> function<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    console.log<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>var p1 <span class="token operator">=</span> new Person<span class="token punctuation">(</span><span class="token punctuation">{</span>name:<span class="token string">"番茄"</span>, age: 18<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> Person1<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person.call<span class="token punctuation">(</span>this, obj<span class="token punctuation">)</span>    this.sex <span class="token operator">=</span> obj.sex<span class="token punctuation">}</span>// 这一步是继承的关键Person1.prototype <span class="token operator">=</span> Object.create<span class="token punctuation">(</span>Person.prototype<span class="token punctuation">)</span>Person1.prototype.play <span class="token operator">=</span> function<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    console.log<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>var p2 <span class="token operator">=</span> new Person1<span class="token punctuation">(</span><span class="token punctuation">{</span>name:<span class="token string">"鸡蛋"</span>, age: 118, sex: <span class="token string">"男"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><ul><li>原型链实际上在上面原型的问题中就有涉及到，在原型的继承中，我们继承来多个原型，这里再提一下实现完美继承的方案，通过借助寄生组合继承，PersonB.prototype = Object.create(PersonA.prototype)这是当我们实例化PersonB得到实例化对象，访问实例化对象的属性时会触发get方法，它会先在自身属性上查找，如果没有这个属性，就会去<strong>proto</strong>中查找，一层层向上直到查找到顶层对象Object，这个查找的过程就是原型链来。</li></ul><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul><li>首先说明什么是闭包，闭包简单来说就是函数嵌套函数，内部函数引用来外部函数的变量，从而导致垃圾回收机制没有把当前变量回收掉，这样的操作带来了内存泄漏的影响，当内存泄漏到一定程度会影响你的项目运行变得卡顿等等问题。因此在项目中我们要尽量避免内存泄漏。</li></ul><h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><ul><li><p>vuex是一个专为vue.js应用程序开发的状态管理器，它采用集中式存储管理应用的所有组件的状态，并且以相应的规则保证状态以一种可以预测的方式发生变化。</p></li><li><p>state: vuex使用单一状态树，用一个对象就包含来全部的应用层级状态</p></li><li><p>mutation: 更改vuex中state的状态的唯一方法就是提交mutation</p></li><li><p>action: action提交的是mutation，而不是直接变更状态，action可以包含任意异步操作</p></li><li><p>getter: 相当于vue中的computed计算属性</p></li></ul><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><ul><li>vue-router是vuex.js官方的路由管理器，它和vue.js的核心深度集成，让构建但页面应用变得易如反掌</li></ul><p><router-link> 组件支持用户在具有路由功能的应用中 (点击) 导航。 通过 to 属性指定目标地址</router-link></p><p><router-view> 组件是一个 functional 组件，渲染路径匹配到的视图组件。</router-view></p><p><keep-alive> 组件是一个用来缓存组件</keep-alive></p><p>router.beforeEach</p><p>router.afterEach</p><p>to: Route: 即将要进入的目标 路由对象</p><p>from: Route: 当前导航正要离开的路由</p><p>next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。</p><p>介绍了路由守卫及用法，在项目中路由守卫起到的作用等等</p><h3 id="深拷贝浅拷贝"><a href="#深拷贝浅拷贝" class="headerlink" title="深拷贝浅拷贝"></a>深拷贝浅拷贝</h3><ul><li><p>浅拷贝：浅拷贝通过ES6新特性Object.assign()或者通过扩展运算法…来达到浅拷贝的目的，浅拷贝修改副本，不会影响原数据，但缺点是浅拷贝只能拷贝第一层的数据，且都是值类型数据，如果有引用型数据，修改副本会影响原数据。</p></li><li><p>深拷贝：通过利用JSON.parse(JSON.stringify())来实现深拷贝的目的，但利用JSON拷贝也是有缺点的，当要拷贝的数据中含有undefined/function/symbol类型是无法进行拷贝的，当然我们想项目开发中需要深拷贝的数据一般不会含</p></li></ul><p>有以上三种类型，如有需要可以自己在封装一个函数来实现。</p><h3 id="Vue通信"><a href="#Vue通信" class="headerlink" title="Vue通信"></a>Vue通信</h3><ul><li>1.props和$emit</li><li>2.中央事件总线 EventBus(基本不用)</li><li>3.vuex(官方推荐状态管理器)</li><li>4.$parent和$children</li><li>当然还有一些其他办法，但基本不常用，或者用起来太复杂来。 介绍来通信的方式，还可以扩展说一下使用场景，如何使用，注意事项之类的。</li></ul><h3 id="陈述http"><a href="#陈述http" class="headerlink" title="陈述http"></a>陈述http</h3><ul><li>基本概念：</li></ul><p>HTTP，全称为 HyperText Transfer Protocol，即为超文本传输协议。是互联网应用最为广泛的一种网络协议所有的 www 文件都必须遵守这个标准。</p><ul><li>http特性：</li></ul><p>HTTP 是无连接无状态的<br>HTTP 一般构建于 TCP/IP 协议之上，默认端口号是 80<br>HTTP 可以分为两个部分，即请求和响应。</p><ul><li>http请求：</li></ul><p>HTTP 定义了在与服务器交互的不同方式，最常用的方法有 4 种<br>分别是 GET，POST，PUT， DELETE。URL 全称为资源描述符，可以这么认为：一个 URL 地址<br>对应着一个网络上的资源，而 HTTP 中的 GET，POST，PUT，DELETE<br>就对应着对这个资源的查询，修改，增添，删除4个操作。</p><p>HTTP 请求由 3 个部分构成，分别是：状态行，请求头(Request Header)，请求正文。</p><p>HTTP 响应由 3 个部分构成，分别是：状态行，响应头(Response Header)，响应正文。</p><p>HTTP 响应中包含一个状态码，用来表示服务器对客户端响应的结果。<br>状态码一般由3位构成：</p><p>1xx : 表示请求已经接受了，继续处理。<br>2xx : 表示请求已经处理掉了。<br>3xx : 重定向。<br>4xx : 一般表示客户端有错误，请求无法实现。<br>5xx : 一般为服务器端的错误。</p><ul><li>比如常见的状态码：</li></ul><p>200 OK 客户端请求成功。<br>301 Moved Permanently 请求永久重定向。<br>302 Moved Temporarily 请求临时重定向。<br>304 Not Modified 文件未修改，可以直接使用缓存的文件。<br>400 Bad Request 由于客户端请求有语法错误，不能被服务器所理解。<br>401 Unauthorized 请求未经授权，无法访问。<br>403 Forbidden 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因。<br>404 Not Found 请求的资源不存在，比如输入了错误的URL。<br>500 Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。<br>503 Service Unavailable 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。</p><h3 id="Vue路由守卫有哪些，怎么设置，使用场景等"><a href="#Vue路由守卫有哪些，怎么设置，使用场景等" class="headerlink" title="Vue路由守卫有哪些，怎么设置，使用场景等"></a>Vue路由守卫有哪些，怎么设置，使用场景等</h3><ul><li>常用的两个路由守卫：router.beforeEach 和 router.afterEach</li></ul><p>每个守卫方法接收三个参数：</p><p>to: Route: 即将要进入的目标 路由对象</p><p>from: Route: 当前导航正要离开的路由</p><p>next: Function: 一定要调用该方法来 resolve 这个钩子。</p><p>在项目中，一般在beforeEach这个钩子函数中进行路由跳转的一些信息判断。<br>判断是否登录，是否拿到对应的路由权限等等。</p><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><ul><li><p>通过ES6新特性Set()</p><pre><code>var arr = [1, 2, 3, 1, 2]; var newArr= [...new Set(arr)]</code></pre></li><li><p>双层 for 循环</p><pre><code>function distinct(arr) {  for (let i=0, len=arr.length; i&lt;len; i++) {      for (let j=i+1; j&lt;len; j++) {          if (arr[i] == arr[j]) {              arr.splice(j, 1);              // splice 会改变数组长度，所以要将数组长度 len 和下标 j 减一              len--;              j--;          }      }  }  return arr;}</code></pre><p>思想: 双重 for 循环是比较笨拙的方法，它实现的原理很简单：先定义一个包含原始数组第一个元素的数组，然后遍历原始数组，将原始数组中的每个元素与新数组中的每个元素进行比对，如果不重复则添加到新数组中，最后返回新数组；因为它的时间复杂度是O(n^2)，如果数组长度很大，效率会很低。</p></li><li><p>Array.filter() 加 indexOf</p><pre><code>function distinct(a, b) {  let arr = a.concat(b);  return arr.filter((item, index)=&gt; {      return arr.indexOf(item) === index  })}</code></pre><p>思想: 利用indexOf检测元素在数组中第一次出现的位置是否和元素现在的位置相等，如果不等则说明该元素是重复元素</p></li></ul><h3 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h3><p>1.ES6引入来严格模式<br>    变量必须声明后在使用<br>    函数的参数不能有同名属性, 否则报错<br>    不能使用with语句 (说实话我基本没用过)<br>    不能对只读属性赋值, 否则报错<br>    不能使用前缀0表示八进制数,否则报错 (说实话我基本没用过)<br>    不能删除不可删除的数据, 否则报错<br>    不能删除变量delete prop, 会报错, 只能删除属性delete global[prop]<br>    eval不会在它的外层作用域引入变量<br>    eval和arguments不能被重新赋值<br>    arguments不会自动反映函数参数的变化<br>    不能使用arguments.caller (说实话我基本没用过)<br>    不能使用arguments.callee (说实话我基本没用过)<br>    禁止this指向全局对象<br>    不能使用fn.caller和fn.arguments获取函数调用的堆栈 (说实话我基本没用过)<br>    增加了保留字（比如protected、static和interface）</p><p>2.关于let和const新增的变量声明</p><p>3.变量的解构赋值</p><p>4.字符串的扩展<br>    includes()：返回布尔值，表示是否找到了参数字符串。<br>    startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。<br>    endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。</p><p>5.数值的扩展<br>    Number.isFinite()用来检查一个数值是否为有限的（finite）。<br>    Number.isNaN()用来检查一个值是否为NaN。</p><p>6.函数的扩展<br>    函数参数指定默认值</p><p>7.数组的扩展<br>    扩展运算符</p><p>8.对象的扩展<br>    对象的解构</p><p>9.新增symbol数据类型</p><p>10.Set 和 Map 数据结构<br>    ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。 Set 本身是一个构造函数，用来生成 Set 数据结构。</p><pre><code>Map它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</code></pre><p>11.Proxy<br>    Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问<br>    都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。<br>    Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。<br>    Vue3.0使用了proxy</p><p>12.Promise<br>    Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。<br>    特点是：<br>        对象的状态不受外界影响。<br>        一旦状态改变，就不会再变，任何时候都可以得到这个结果。</p><p>13.async 函数<br>    async函数对 Generator 函数的区别：<br>    （1）内置执行器。<br>    Generator 函数的执行必须靠执行器，而async函数自带执行器。也就是说，async函数的执行，与普通函数一模一样，只要一行。<br>    （2）更好的语义。<br>    async和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。<br>    （3）正常情况下，await命令后面是一个 Promise 对象。如果不是，会被转成一个立即resolve的 Promise 对象。<br>    （4）返回值是 Promise。<br>    async函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用then方法指定下一步的操作。</p><p>14.Class<br>    class跟let、const一样：不存在变量提升、不能重复声明…<br>    ES6 的class可以看作只是一个语法糖，它的绝大部分功能<br>    ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p><p>15.Module<br>    ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”;。<br>    import和export命令以及export和export default的区别</p><h3 id="Css3新特性"><a href="#Css3新特性" class="headerlink" title="Css3新特性"></a>Css3新特性</h3><p>1.过渡 transition<br>2.动画 animation<br>3.形状转换 transform<br>4.阴影 box-shadow<br>5.滤镜 Filter<br>6.颜色 rgba<br>7.栅格布局 gird<br>8.弹性布局 flex</p><h3 id="说一说什么是跨域，怎么解决"><a href="#说一说什么是跨域，怎么解决" class="headerlink" title="说一说什么是跨域，怎么解决"></a>说一说什么是跨域，怎么解决</h3><pre><code>因为浏览器出于安全考虑，有同源策略。也就是说，如果协议、域名或者端口有一个不同就是跨域，Ajax 请求会失败。为来防止CSRF攻击1.JSONP    JSONP 的原理很简单，就是利用 &lt;script&gt; 标签没有跨域限制的漏洞。    通过 &lt;script&gt; 标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。    &lt;script src="http://domain/api?param1=a&amp;param2=b&amp;callback=jsonp"&gt;&lt;/script&gt;    &lt;script&gt;        function jsonp(data) {            console.log(data)        }    &lt;/script&gt;    JSONP 使用简单且兼容性不错，但是只限于 get 请求。2.CORS    CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现。3.document.domain    该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com 适用于该方式。    只需要给页面添加 document.domain = 'test.com' 表示二级域名都相同就可以实现跨域4.webpack配置proxyTable设置开发环境跨域5.nginx代理跨域6.iframe跨域7.postMessage    这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息</code></pre><h3 id="说一说前端性能优化方案"><a href="#说一说前端性能优化方案" class="headerlink" title="说一说前端性能优化方案"></a>说一说前端性能优化方案</h3><p>三个方面来说明前端性能优化<br>一： webapck优化与开启gzip压缩<br>    1.babel-loader用 include 或 exclude 来帮我们避免不必要的转译，不转译node_moudules中的js文件<br>    其次在缓存当前转译的js文件，设置loader: ‘babel-loader?cacheDirectory=true’<br>    2.文件采用按需加载等等<br>    3.具体的做法非常简单，只需要你在你的 request headers 中加上这么一句：<br>    accept-encoding:gzip<br>    4.图片优化，采用svg图片或者字体图标<br>    5.浏览器缓存机制，它又分为强缓存和协商缓存<br>二：本地存储——从 Cookie 到 Web Storage、IndexedDB<br>    说明一下SessionStorage和localStorage还有cookie的区别和优缺点<br>三：代码优化<br>    1.事件代理<br>    2.事件的节流和防抖<br>    3.页面的回流和重绘<br>    4.EventLoop事件循环机制<br>    5.代码优化等等</p><h3 id="说一说SessionStorage和localStorage还有cookie"><a href="#说一说SessionStorage和localStorage还有cookie" class="headerlink" title="说一说SessionStorage和localStorage还有cookie"></a>说一说SessionStorage和localStorage还有cookie</h3><p>共同点：都是保存在浏览器端、且同源的<br>不同点：<br>    1.cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。<br>    cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下<br>    sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。<br>    2.存储大小限制也不同，cookie数据不能超过4K，sessionStorage和localStorage可以达到5M<br>    3.sessionStorage：仅在当前浏览器窗口关闭之前有效；<br>    localStorage：始终有效，窗口或浏览器关闭也一直保存，本地存储，因此用作持久数据；<br>    cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭<br>    4.作用域不同<br>    sessionStorage：不在不同的浏览器窗口中共享，即使是同一个页面；<br>    localstorage：在所有同源窗口中都是共享的；也就是说只要浏览器不关闭，数据仍然存在<br>    cookie: 也是在所有同源窗口中都是共享的.也就是说只要浏览器不关闭，数据仍然存在</p><h3 id="说说浏览器缓存"><a href="#说说浏览器缓存" class="headerlink" title="说说浏览器缓存"></a>说说浏览器缓存</h3><p>缓存可以减少网络 IO 消耗，提高访问速度。浏览器缓存是一种操作简单、效果显著的前端性能优化手段<br>很多时候，大家倾向于将浏览器缓存简单地理解为“HTTP 缓存”。<br>但事实上，浏览器缓存机制有四个方面，它们按照获取资源时请求的优先级依次排列如下：</p><p>Memory Cache<br>Service Worker Cache<br>HTTP Cache<br>Push Cache</p><p>缓存它又分为强缓存和协商缓存。优先级较高的是强缓存，在命中强缓存失败的情况下，才会走协商缓存<br>    实现强缓存，过去我们一直用 expires。<br>    当服务器返回响应时，在 Response Headers 中将过期时间写入 expires 字段，现在一般使用Cache-Control 两者同时出现使用Cache-Control </p><pre><code>协商缓存，Last-Modified 是一个时间戳，如果我们启用了协商缓存，它会在首次请求时随着 Response Headers 返回：每次请求去判断这个时间戳是否发生变化。从而去决定你是304读取缓存还是给你返回最新的数据</code></pre><h3 id="Vue路由守卫有哪些，怎么设置，使用场景等-1"><a href="#Vue路由守卫有哪些，怎么设置，使用场景等-1" class="headerlink" title="Vue路由守卫有哪些，怎么设置，使用场景等"></a>Vue路由守卫有哪些，怎么设置，使用场景等</h3><ul><li>常用的两个路由守卫：router.beforeEach 和 router.afterEach</li></ul><h3 id="webpack配置入口出口"><a href="#webpack配置入口出口" class="headerlink" title="webpack配置入口出口"></a>webpack配置入口出口</h3><pre><code>module.exports={    //入口文件的配置项    entry:{},    //出口文件的配置项    output:{},    //模块：例如解读CSS,图片如何转换，压缩    module:{},    //插件，用于生产模版和各项功能    plugins:[],    //配置webpack开发服务功能    devServer:{}}简单描述了一下这几个属性是干什么的。描述一下npm run dev / npm run build执行的是哪些文件通过配置proxyTable来达到开发环境跨域的问题，然后又可以扩展和他聊聊跨域的产生，如何跨域最后可以在聊聊webpack的优化，例如babel-loader的优化，gzip压缩等等</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flag后台管理完成100章</title>
      <link href="/2020/02/28/3.5-hou-tai-guan-li-100-zhang-flag/"/>
      <url>/2020/02/28/3.5-hou-tai-guan-li-100-zhang-flag/</url>
      
        <content type="html"><![CDATA[<p>这是今天的一个小flag<br>必须要完成，就算通宵也要完成！！！<br>现在时间2020年2月28日20:35:11</p><p>是否完成了？？？<br>否！<br>完成到90章</p><p>7天后要完成到250章节<br>第一天：90章<br>第二天：<br>第三天：<br>第四天：<br>第五天：<br>第六天：<br>第七天：</p><p>是否完成了？？</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>想赚很多很多钱</title>
      <link href="/2020/02/27/3.4-zhuan-qian/"/>
      <url>/2020/02/27/3.4-zhuan-qian/</url>
      
        <content type="html"><![CDATA[<p>希望能快点赚钱<br>不要再为了买一个喜欢的东西而纠结很久<br>做什么事情都要先考虑考虑钱的问题！！！<br>买什么东西也都要精挑细选<br>想吃什么就吃什么<br>东西看上了就买买买！！！</p><p>要快点学习技术，赚很多很多的钱~<br>比如先定一个小目标，月入过万~</p><p>JavaScript要熟练运用<br>React、Vue、Angular也要熟练运用<br>uni-app跨平台开发也要熟练运用</p><p>会这些月入过万应该差不多了吧？</p><p><img src="/medias/imgs/15.jpg" alt=""></p><p>加油吧<br>年轻就是现在最大的资本</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玄学$event</title>
      <link href="/2020/02/27/1.3vue-xuan-xue-event/"/>
      <url>/2020/02/27/1.3vue-xuan-xue-event/</url>
      
        <content type="html"><![CDATA[<h2 id="vue中watch原理"><a href="#vue中watch原理" class="headerlink" title="vue中watch原理"></a>vue中watch原理</h2><h3 id="el-input的type-”text”"><a href="#el-input的type-”text”" class="headerlink" title="el-input的type=”text”"></a>el-input的type=”text”</h3><blockquote><p>$event为一个大的对象，里面有很多值 获取input的value 为$event.target.value</p></blockquote><pre class=" language-bash"><code class="language-bash">  <span class="token operator">&lt;</span>el-form-item label<span class="token operator">=</span><span class="token string">"库存预警"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>el-input type<span class="token operator">=</span><span class="token string">"text"</span> :value<span class="token operator">=</span><span class="token string">"min_stock"</span> @input<span class="token operator">=</span><span class="token string">"vModel('min_stock',<span class="token variable">$event</span>)"</span> class<span class="token operator">=</span><span class="token string">"w-25"</span><span class="token operator">></span><span class="token operator">&lt;</span>/el-input<span class="token operator">></span>    <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"append"</span><span class="token operator">></span>件<span class="token operator">&lt;</span>/template<span class="token operator">></span>  <span class="token operator">&lt;</span>/el-form-item<span class="token operator">></span></code></pre><blockquote><p>$event 为实时绑定的input 值</p></blockquote><pre class=" language-bash"><code class="language-bash">  <span class="token operator">&lt;</span>el-form-item label<span class="token operator">=</span><span class="token string">"库存预警"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>el-input type<span class="token operator">=</span><span class="token string">"number"</span> :value<span class="token operator">=</span><span class="token string">"min_stock"</span> @input<span class="token operator">=</span><span class="token string">"vModel('min_stock',<span class="token variable">$event</span>)"</span> class<span class="token operator">=</span><span class="token string">"w-25"</span><span class="token operator">></span><span class="token operator">&lt;</span>/el-input<span class="token operator">></span>    <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"append"</span><span class="token operator">></span>件<span class="token operator">&lt;</span>/template<span class="token operator">></span>  <span class="token operator">&lt;</span>/el-form-item<span class="token operator">></span></code></pre><blockquote><p>$event 为实时绑定的label 值</p></blockquote><pre class=" language-bash"><code class="language-bash">  <span class="token operator">&lt;</span>el-form-item label<span class="token operator">=</span><span class="token string">"库存显示"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>el-radio-group :value<span class="token operator">=</span><span class="token string">"stock_display"</span> @input<span class="token operator">=</span><span class="token string">"vModel('stock_display',<span class="token variable">$event</span>)"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>el-radio :label<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">></span>是<span class="token operator">&lt;</span>/el-radio<span class="token operator">></span>      <span class="token operator">&lt;</span>el-radio :label<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>否<span class="token operator">&lt;</span>/el-radio<span class="token operator">></span>    <span class="token operator">&lt;</span>/el-radio-group<span class="token operator">></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取对象值得三种写法</title>
      <link href="/2020/02/26/1.2-huo-qu-dui-xiang-zhi-de-san-chong-xie-fa/"/>
      <url>/2020/02/26/1.2-huo-qu-dui-xiang-zhi-de-san-chong-xie-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="获取对象值得三种写法"><a href="#获取对象值得三种写法" class="headerlink" title="获取对象值得三种写法"></a>获取对象值得三种写法</h2><p>今天在写vuex时，遇到一个问题，总是出错，最后用console.log一步步打印，终于到问题定位<br>其实就是很简单的对象获取值得问题</p><pre class=" language-bash"><code class="language-bash"> <span class="token operator">&lt;</span>el-radio-group :value<span class="token operator">=</span><span class="token string">"skus_type"</span> @input<span class="token operator">=</span><span class="token string">"vModel({key:'skus_type',value:<span class="token variable">$event</span>})"</span> size<span class="token operator">=</span><span class="token string">"medium"</span><span class="token operator">></span>              <span class="token operator">&lt;</span>el-radio-button :label<span class="token operator">=</span><span class="token string">"0"</span> size<span class="token operator">=</span><span class="token string">"medium"</span><span class="token operator">></span>统一规格<span class="token operator">&lt;</span>/el-radio-button<span class="token operator">></span>              <span class="token operator">&lt;</span>el-radio-button :label<span class="token operator">=</span><span class="token string">"1"</span> size<span class="token operator">=</span><span class="token string">"medium"</span><span class="token operator">></span>多规格<span class="token operator">&lt;</span>/el-radio-button<span class="token operator">></span>            <span class="token operator">&lt;</span>/el-radio-group<span class="token operator">></span>vModel<span class="token punctuation">(</span>state,payload<span class="token punctuation">)</span><span class="token punctuation">{</span>      state<span class="token punctuation">[</span>payload<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>      console.log<span class="token punctuation">(</span>state.skus_type<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,</code></pre><p>##问题出现的原因是</p><pre class=" language-bash"><code class="language-bash">state<span class="token punctuation">[</span>payload<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>错写成state<span class="token punctuation">[</span>payload<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> payload<span class="token punctuation">[</span>value<span class="token punctuation">]</span>错误原因是没加引号，其实很简单</code></pre><p>##考察的知识点如下</p><pre class=" language-bash"><code class="language-bash">var name <span class="token operator">=</span> <span class="token string">"张三"</span>  var age <span class="token operator">=</span> 18  var obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name,    age  <span class="token punctuation">}</span>  var test1 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console.log<span class="token punctuation">(</span>obj.name<span class="token punctuation">)</span>     //zhangsan    console.log<span class="token punctuation">(</span>obj<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>    //undefined    console.log<span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  //zhangsan  <span class="token punctuation">}</span>  test1<span class="token punctuation">(</span><span class="token punctuation">{</span>    name <span class="token keyword">:</span> <span class="token string">"zhangsan"</span>,    age <span class="token keyword">:</span> 18  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随便写写</title>
      <link href="/2020/02/25/3.3-zong-gan-jue-jing-shen-bu-zai-zhuang-tai/"/>
      <url>/2020/02/25/3.3-zong-gan-jue-jing-shen-bu-zai-zhuang-tai/</url>
      
        <content type="html"><![CDATA[<p>最近总是感觉精神不在状态？？？？？？？<br>22点就很困了，但是在床上翻来覆去睡不着，头还有点晕<br>是不是该锻炼身体了？？？</p><p>近期的目标是先找份工作，其次还想学习一下伪音，比如伪音公子音<br><img src="/medias/imgs/11.jpg" alt=""></p><p>图就随便配一张了，今天就记录的这了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发三点注意事项</title>
      <link href="/2020/02/25/3.2-qian-duan-kai-fa-san-dian-zhu-yi-shi-xiang/"/>
      <url>/2020/02/25/3.2-qian-duan-kai-fa-san-dian-zhu-yi-shi-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="第一点-夯实基础"><a href="#第一点-夯实基础" class="headerlink" title="第一点 夯实基础"></a>第一点 夯实基础</h1><p>基础一定要掌握牢固，基础知识一问三不知，就是贻笑大方。css，js基础知识一定要掌握得很熟练。</p><p>到什么程度可以称为熟练？你能使用css实现斑马条纹背景，毛玻璃效果吗？能给图片实现滤镜效果，能实现所有自适应布局效果吗？原型，原型链，闭包是实现设计模式的必备知识，你真的弄懂了吗？闭包导致内存泄漏的原因是什么，你弄明白了吗？ajax跨域的解决方案你可以说几种？9102年了，你还是只告诉我jsonp吗？http协议有了解过吗？</p><p>现在是9102年了，这些问题老掉牙了。可是我要告诉你的是，掌握好这些老掉牙的基础，就是很重要。上层的技术可以变更的很快，基础变动很慢，投入时间学好基础，性价比很高。</p><p> <img src="/medias/imgs/9.jpg" alt=""></p><h1 id="第二点-深究原理"><a href="#第二点-深究原理" class="headerlink" title="第二点 深究原理"></a>第二点 深究原理</h1><p>Angular，React,Vue框架和脚手架的普及，越来越多的前端工程师浮于表面，调用框架的API完成任务就完事。要成为一名优秀的前端，绝不能成为单纯的”API调用工程师”，一定要掌握框架背后的原理性知识。</p><p>Virtual DOM diff算法，双向绑定原理等等框架背后的机制都值得我们去学习。框架API可以更新很快，而他们背后的原理都是相似的，学好原理既可以让我们对框架底层了解更深入，又可以使我们迅速掌握不断更新的框架表层。只会用框架永远也成不了大神。</p><p> <img src="/medias/imgs/10.jpg" alt=""></p><h1 id="第三点-注意细节"><a href="#第三点-注意细节" class="headerlink" title="第三点 注意细节"></a>第三点 注意细节</h1><p>“代码能用就行”的认识往往是初级程序员的通病。作为有在技术道路上有理想的工程师，一定要对自己的代码严格要求，精益求精。</p><p>比如HTML一定要注意语义化以方便SEO优化，该用</p><section>，，<foot>的地方不能一股脑儿用<div>完事;css中编写样式时不能页面上样式是有了，类名和属性排序写得一塌糊涂，建议大家按照BEM规范编写风格良好的代码；js中变量命名随意是很常见的不规范行为，一个不直观的变量名往往使同事看了脑袋大。<p></p><p>“代码千万行，注释第一行。命名不规范，同事两行泪。“一首流行诗，饱含了多少程序员的血与泪。</p></div></foot></section><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在你变好的这些年，一定过得很辛苦吧？</title>
      <link href="/2020/02/23/3.1-zai-ni-bian-hao-de-zhe-xie-nian-yi-ding-guo-de-hen-xin-ku-ba/"/>
      <url>/2020/02/23/3.1-zai-ni-bian-hao-de-zhe-xie-nian-yi-ding-guo-de-hen-xin-ku-ba/</url>
      
        <content type="html"><![CDATA[<p>　　年华似水匆匆走过，岁月悄然无声增长，在静下来的时光里回首过往，发现人总是会在某一刻感叹良多。</p><p>　　许是念起一些事，许是念起一些人，许是念起经历的点点滴滴……</p><p>　　后来总结发现，其实每个人都不容易，其实每个人都各有苦衷。当你试着理解过去，当你试着看淡曾经，内心便会生出一种叫做慈悲的东西；当你学着接纳自己的好与不好时，意味着你也在跟这个世界握手言和。</p><p>　　“那些打不倒你的过去，都终将会让你变得更强大。”</p><p><img src="/medias/imgs/8.jpg" alt=""></p><p>　　以前我一直不相信这句话，觉得这不过是一句现实生活中的鸡汤语，直到经历了一些事，我才不得不承认有些经历未必不好，因为它至少会教会你一些什么。</p><p>　　日子每一天都是新的，人则每一天都可能经历不一样的事情，当你学会对发生的事情进行思考、总结，通过长时间的积累，对一些事物的看法也便渐渐会由浅入深，由表及里，自然也就有了自己更独到的看法和想法。</p><p>　　在岁月里，这些其实都统称为阅历。因为当你走过一些路，经历一些人、经历一些事，多少都会有收获、有感慨，也有经验之谈。</p><p>　　就像旅行，当你走出去看的多了，眼界自然打开，心胸自然开阔，同时你也会更明白和清楚自己最想要的是什么，什么又才是最值得自己去珍惜和追求的。所以，前辈们口中所说的经历得越多，阅历则越丰富也并不是没有道理的。</p><p><img src="/medias/imgs/15.jpg" alt=""></p><p>　　曾经，在那些年少轻狂的岁月里，我记得只要有人诋毁我，我便会言辞激烈的去辩驳；有人误解我，我便会气急败坏的去解释；有人辱骂我，我便会用更加恶毒的语言去回敬对方……</p><p>　　没错，那会的我真的是个性鲜明，眼睛里容不得半点沙子，肠子直的都不会拐弯，活生生的把自己变成了自己最讨厌的那种人。</p><p>　　但后来我学会了自主的去调整自己的心态，也终于明白，这个世界上无论你有多好，还是会有人不喜欢你；这个世界不会因为你付出了多少，便同样的给予你多少回报；这个世界也不会因为你对别人友善，别人便也以同样的方式对待你。</p><p>　　是岁月和经历教会了我平和，是挫折和困境教会了我向上，是世间的人和事教会了我宽容……</p><p>　　渐渐的学会了不管遇到任何事都能平静的接受和面对，渐渐的对身边的人越来越温和，渐渐的对世间发生的任何事都淡然处之，就这样在时光里慢慢知味，就这样在岁月里缓缓沉香。</p><p><img src="/medias/imgs/18.jpg" alt=""></p><p>　　那些公平的、不公平的都是人生的常态。难得的是在你经历了许多之后，依然保持着那份谦卑和平和，依然保持着那份乐观和善良。</p><p>　　有人说：“每一个懂事淡定的现在，都有一个很傻很天真的过去，每一个温暖而淡然的如今，都有一个悲伤而不安的曾经”。回首过往，的确如此。所有越变越好的现在都多少有着各自不一样的曾经。</p><p>　　当时光磨平了你的菱角，即便是再急躁的人也会慢慢变得温柔有耐心。那些生个气牛都拉不回来的岁月也终将会慢慢离我们远去，换而来之的是微微一笑，好坏都坦然接受，以及生出一种闲看庭前花开花落，去留无意望天上云卷云舒的淡然。</p><p>　　这个时候的我们可能再也没有了年少时的轻狂和冲动，再也没有了孩童时的无忧和无虑，但这会的我们却懂得了生命的宽度和厚度。</p><p><img src="/medias/imgs/16.jpg" alt=""></p><p>　　一路走来哭过，笑过，迷茫过，颓废过，怀疑过，犹豫过……但终于还是学会了把一切都当成了成长。</p><p>　　或许这才是生活原本该有的样子吧！</p><p>　　你不辜负岁月，岁月亦不会辜负于你。</p><p>　　所幸最后没有辜负，所幸最后我们都慢慢变成了自己喜欢的样子，那么一切就都值得。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖和节流</title>
      <link href="/2020/02/23/1.1-fang-dou-he-jie-liu/"/>
      <url>/2020/02/23/1.1-fang-dou-he-jie-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><blockquote><p>函数防抖函数的防抖就是函数需要频繁触发情况时候，只有足够空闲的时间，才执行一次<br>例如：实时搜索、拖拽中</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> debounce<span class="token punctuation">(</span>func, delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> timer <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> clearTimeout<span class="token punctuation">(</span>timer<span class="token punctuation">)</span> timer <span class="token operator">=</span> setTimeout<span class="token punctuation">((</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          func.apply<span class="token punctuation">(</span>this, arguments<span class="token punctuation">)</span>        <span class="token punctuation">}</span>, delay<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><blockquote><p>函数节流就是预定一个函数只有在大于等于执行周期时候才会执行，周期内调用不执行<br>例如：窗口调整、页面滚动、购物疯狂点击</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token keyword">function</span> throttle<span class="token punctuation">(</span>func, wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>      var lastTime <span class="token operator">=</span> 0<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>        var nowTime <span class="token operator">=</span> new Date<span class="token punctuation">(</span><span class="token punctuation">)</span>.getTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nowTime - lastTime <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>          func.apply<span class="token punctuation">(</span>this, arguments<span class="token punctuation">)</span> lastTime <span class="token operator">=</span> nowTime        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中watch原理</title>
      <link href="/2020/02/23/1.2vue-watch/"/>
      <url>/2020/02/23/1.2vue-watch/</url>
      
        <content type="html"><![CDATA[<h2 id="vue中watch原理"><a href="#vue中watch原理" class="headerlink" title="vue中watch原理"></a>vue中watch原理</h2><h3 id="普通的watch"><a href="#普通的watch" class="headerlink" title="普通的watch"></a>普通的watch</h3><pre class=" language-bash"><code class="language-bash">data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    frontPoints: 0  <span class="token punctuation">}</span><span class="token punctuation">}</span>,watch: <span class="token punctuation">{</span>  frontPoints<span class="token punctuation">(</span>newValue,oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console.log<span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="对象属性的watch"><a href="#对象属性的watch" class="headerlink" title="对象属性的watch"></a>对象属性的watch</h3><blockquote><p>对象和数组都是引用类型，引用类型变量存的是地址，地址没有变，所以不会触发watch。这时我们需要进行深度监听，就需要加上一个属性 deep，值为 true</p></blockquote><pre class=" language-bash"><code class="language-bash">data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    bet: <span class="token punctuation">{</span>      pokerState: 53,      pokerHistory: <span class="token string">'local'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>,watch: <span class="token punctuation">{</span>  bet: <span class="token punctuation">{</span>    handle<span class="token punctuation">(</span>newValue, oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console.log<span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  deep: <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：只要对象的属性发生变化，就会执行handler函数；如果将监听对象中的具体属性，则可以通过计算属性computed作为中间层进行监听，例如：</p></blockquote><pre class=" language-bash"><code class="language-bash">data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    bet: <span class="token punctuation">{</span>      pokerState: 53,      pokerHistory: <span class="token string">'local'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>,computed: <span class="token punctuation">{</span>  pokerHistory<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> this.bet.pokerHistory  <span class="token punctuation">}</span><span class="token punctuation">}</span>watch: <span class="token punctuation">{</span>  bet: <span class="token punctuation">{</span>    handle<span class="token punctuation">(</span>newValue, oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console.log<span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  deep: <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><h3 id="Watch和computed的区别"><a href="#Watch和computed的区别" class="headerlink" title="Watch和computed的区别"></a>Watch和computed的区别</h3><h4 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h4><blockquote><p>watch用于观察和监听页面上的vue实例，当你需要在数据变化响应时，执行异步操作，或高性能消耗的操作，那么watch为最佳选择</p></blockquote><h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4><blockquote><p>可以关联多个实时计算的对象，当这些对象中的其中一个改变时都会触发这个属性具有缓存能力，所以只有当数据再次改变时才会重新渲染，否则就会直接拿取缓存中的数据</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站第一篇文章</title>
      <link href="/2020/02/23/first/"/>
      <url>/2020/02/23/first/</url>
      
        <content type="html"><![CDATA[<h1 id="从今天开始，每一天都至少要写一遍文章到博客里"><a href="#从今天开始，每一天都至少要写一遍文章到博客里" class="headerlink" title="从今天开始，每一天都至少要写一遍文章到博客里"></a>从今天开始，每一天都至少要写一遍文章到博客里</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
